/*
 * Copyright 2018-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.basc.framework.redis;

import io.basc.framework.lang.Nullable;
import io.basc.framework.util.Assert;
import io.basc.framework.util.ObjectUtils;
import io.basc.framework.util.StringUtils;
import io.basc.framework.util.math.NumberUtils;

public class RecordId {

	private static final String GENERATE_ID = "*";
	private static final String DELIMITER = "-";

	private static final RecordId AUTOGENERATED = new RecordId(GENERATE_ID) {

		@Override
		public Long getSequence() {
			return null;
		}

		@Override
		public Long getTimestamp() {
			return null;
		}

		@Override
		public boolean shouldBeAutoGenerated() {
			return true;
		}
	};

	private final String raw;

	private RecordId(String raw) {
		this.raw = raw;
	}

	public static RecordId of(@Nullable String value) {

		if (value == null || GENERATE_ID.equals(value)) {
			return autoGenerate();
		}

		Assert.isTrue(value.contains(DELIMITER),
				"Invalid id format. Please use the 'millisecondsTime-sequenceNumber' format.");
		return new RecordId(value);
	}

	public static RecordId of(long millisecondsTime, long sequenceNumber) {
		return of(millisecondsTime + DELIMITER + sequenceNumber);
	}

	public static RecordId autoGenerate() {
		return AUTOGENERATED;
	}

	@Nullable
	public Long getTimestamp() {
		return value(0);
	}

	@Nullable
	public Long getSequence() {
		return value(1);
	}

	public boolean shouldBeAutoGenerated() {
		return false;
	}

	public String getValue() {
		return raw;
	}

	@Override
	public String toString() {
		return raw;
	}

	private Long value(int index) {
		return NumberUtils.parseNumber(StringUtils.splitToArray(raw, DELIMITER)[index], Long.class);
	}

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		RecordId recordId = (RecordId) o;

		return ObjectUtils.equals(raw, recordId.raw);
	}

	@Override
	public int hashCode() {
		return ObjectUtils.hashCode(raw);
	}
}
